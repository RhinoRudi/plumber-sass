// PLUMBER - Easy baseline grids with SASS
// https://jamonserrano.github.io/plumber-sass
// Copyright 2018 Viktor Honti
// MIT License

@mixin plumber($params...) {
	// Get parameter map with expanded shorthand properties
	$params: -plumber-expand-shorthand-properties($params);
	
	// Validate parameters
	$font-size: -plumber-get-parameter($params, font-size);
	@if not(-plumber-is-unitless($font-size) and $font-size > 0) {
		@error '$font-size parameter must be a positive number, got #{$font-size or 'null'} instead';
	}

	$line-height: -plumber-get-parameter($params, line-height);
	@if not(-plumber-is-integer($line-height) and $line-height > 0) {
		@error '$line-height parameter must be a positive integer, got #{$line-height or 'null'} instead';
	}

	$margin-top: -plumber-get-parameter($params, margin-top);
	@if not(-plumber-is-integer($margin-top)) {
		@error '$margin-top parameter must be an integer, got #{$margin-top or 'null'} instead';
	}

	$margin-bottom: -plumber-get-parameter($params, margin-bottom);
	@if not(-plumber-is-integer($margin-bottom)) {
		@error '$margin-bottom parameter must be an integer, got #{$margin-bottom or 'null'} instead';
	}

	$padding-top: -plumber-get-parameter($params, padding-top);
	@if not(-plumber-is-integer($padding-top) and $padding-top >= 0) {
		@error '$padding-top parameter must be a non-negative integer, got #{$padding-top or 'null'} instead';
	}

	$padding-bottom: -plumber-get-parameter($params, padding-bottom);
	@if not(-plumber-is-integer($padding-bottom) and $padding-bottom >= 0) {
		@error '$padding-bottom parameter must be a non-negative integer, got #{$padding-bottom or 'null'} instead';
	}

	$border-top: -plumber-get-parameter($params, border-top);
	@if $border-top < 0 or -plumber-is-unitless($border-top) {
		@error '$border-top parameter must be a non-negative unit, got #{$border-top or 'null'} instead';
	}

	$border-bottom: -plumber-get-parameter($params, border-bottom);
	@if $border-bottom < 0 or -plumber-is-unitless($border-bottom) {
		@error '$border-bottom parameter must be a non-negative unit, got #{$border-bottom or 'null'} instead';
	}

	$grid-height: -plumber-get-parameter($params, grid-height);
	@if not($grid-height and $grid-height >= 0) or -plumber-is-unitless($grid-height) {
		@error '$grid-height parameter must be a positive unit, got #{$grid-height or 'null'} instead';
	}

	$baseline: -plumber-get-parameter($params, baseline);
	@if not(-plumber-is-unitless($baseline) and $baseline >= 0 and $baseline < 1) {
		@error '$baseline parameter must be a fraction between 0 and 1, got #{$baseline or 'null'} instead';
	}

	$use-baseline-origin: -plumber-get-parameter($params, use-baseline-origin);
	@if not(type-of($use-baseline-origin) == bool) {
		@error '$use-baseline-origin parameter must be boolean, got #{$use-baseline-origin or 'null'} instead';
	}

	// Calculate baseline correction
	// the distance of the original baseline from the bottom
	$baseline-from-bottom: ($line-height - $font-size) / 2 + ($font-size * $baseline);
	// the corrected baseline will be on the nearest gridline
	$corrected-baseline: round($baseline-from-bottom);
	// the difference between the original and the corrected baseline
	$baseline-difference: $corrected-baseline - $baseline-from-bottom;
	
	// if baseline origin is used for leadings substract the distance of the baseline from the edges
	@if $use-baseline-origin == true {
		$margin-top: $margin-top - ($line-height - $corrected-baseline);
		$margin-bottom: $margin-bottom - $corrected-baseline;
	}

	// Calculate font size and line hight
	$font-size: $font-size * $grid-height;
	$line-height: $line-height * $grid-height;

	// Calculate margins and paddings
	@if $baseline-difference < 0 {
		// add top leading
		$margin-top: $margin-top * $grid-height;
		// push the baseline down to the next gridline
		$padding-top: ($padding-top - $baseline-difference) * $grid-height;
		// add the remaining distance to reach the next gridline
		$padding-bottom: ($padding-bottom + 1 + $baseline-difference) * $grid-height;
		// add bottom leading and remove the 1 excess grid height that comes from pushing down
		$margin-bottom: ($margin-bottom - 1) * $grid-height;
	} @else {
		// add top leading and remove the 1 excess grid height that comes from pulling up
		$margin-top: ($margin-top - 1) * $grid-height;
		// pull the baseline up to the previous gridline
		$padding-top: ($padding-top + 1 - $baseline-difference) * $grid-height;
		// add the remaining distance to reach the next gridline
		$padding-bottom: ($padding-bottom + $baseline-difference) * $grid-height;
		// add bottom leading
		$margin-bottom: $margin-bottom * $grid-height;
	}
	
	// round pixel values to decrease browser inconsistencies
	@if unit($grid-height) == "px" {
		$line-height: -plumber-round($line-height);
		$margin-top: -plumber-round($margin-top);
		$padding-top: -plumber-round($padding-top);
		$padding-bottom: -plumber-round($padding-bottom);
		$margin-bottom: -plumber-round($margin-bottom);
	}

	// Output CSS
	font-size: $font-size;
	line-height: $line-height;
	margin-top: $margin-top;
	
	@if border-top {
		border-top: $border-top;
		padding-top: calc(#{$padding-top} - #{$border-top});
	} @else {
	padding-top: $padding-top;
	}

	@if border-bottom {
		padding-bottom: calc(#{$padding-bottom} - #{border-bottom});
		border-bottom: $border-bottom;
	} @else {
	padding-bottom: $padding-bottom;
}

	margin-bottom: $margin-bottom;
}
$-plumber-defaults: (
	margin-top: 0,
	margin-bottom: 0,
	padding-top: 0,
	padding-bottom: 0,
	border-top: 0,
	border-bottom: 0,
	use-baseline-origin: false
);

// Merge provided settings into the defaults map 
@mixin plumber-set-defaults($defaults...) {
	$-plumber-defaults: map-merge($-plumber-defaults, -plumber-expand-shorthand-properties($defaults)) !global;
}

// Convert parameter list to a map and replace shorthand properties (margin, padding) with ...-top and ...-bottom properties
@function -plumber-expand-shorthand-properties($map) {
	$map: keywords($map);
	@each $key in margin, padding, border {
		$value: map-get($map, $key);
		@if $value {
			$values: ();
			@if length($value) == 1 {
				$values: (#{$key}-top: $value, #{$key}-bottom: $value);
			}
			@else if length($value) == 2 {
				$values: (
					#{$key}-top: nth($value, 1),
					#{$key}-bottom: nth($value, 2)
				);
			}
			@else {
				@error '$#{$key} parameter can contain one or two (top, bottom) values, got \'#{$value}\' instead';
			}
			$map: map-merge(map-remove($map, $key), $values);
		}
	}
	@return $map;
}

// Get a value from either the provided map or from the defaults
@function -plumber-get-parameter($params, $key) {
	@return map-get(if(map-has-key($params, $key), $params, $-plumber-defaults), $key);
}

// Check if a value exists and is an integer
@function -plumber-is-integer($value) {
	@return -plumber-is-unitless($value) and $value == round($value);
}

// Check if a value exists and is unitless
@function -plumber-is-unitless($value) {
	@return $value == 0 or unitless($value);
}

// Round value to the nearest quarter pixel providing reasonable precision and preventing grid creep in most browsers
@function -plumber-round($value) {
	@return round($value * 4) / 4;
}
